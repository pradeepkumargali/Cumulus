<project xmlns:sf="antlib:com.salesforce">

  <!-- Following typedefs and macro definitions are from https://gist.github.com/afawcett/5843110 -->
  <!--   Download from Salesforce Tools page under Setup -->
  <typedef 
      uri="antlib:com.salesforce" 
      resource="com/salesforce/antlib.xml" 
      classpath="${basedir}/lib/ant-salesforce.jar"/>
      
  <!--   Download from http://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ -->
  <taskdef 
      resource="net/sf/antcontrib/antlib.xml" 
      classpath="${basedir}/lib/ant-contrib-1.0b2.jar"
      />  


  <!--
  <taskdef 
      resource="ise.antelope.tasks.antelope.taskdefs"
      classpath="${basedir}/lib/AntelopeApp.jar" />
      -->

  <!-- Ant doesn't like < in replace tokens or values so set a property with < via cdata for reuse later -->
  <property name="lt"><![CDATA[<]]></property>


  <macrodef name="installPackage" description="Installs the given managed package">
      <attribute name="namespace" description="Namespace of managed package to install."/>
      <attribute name="version" description="Version of managed package to install."/>
      <attribute name="packagePassword" description="Password used to install the pacakge. Optional." default=""/>
      <attribute name="username" description="Salesforce user name."/>
      <attribute name="password" description="Salesforce password."/>
      <sequential>
          <!-- Generate optional <password> element? -->
          <if><equals arg1="@{packagePassword}" arg2=""/>
              <then><property name="passwordElement" value=""/></then>
              <else><property name="passwordElement" value="&lt;password&gt;@{packagePassword}&lt;/password&gt;"/></else>
          </if>
          <!-- Generate working folder and metadata files representing the package to install -->
          <delete dir="${basedir}/installdeploy"/>
          <mkdir dir="${basedir}/installdeploy"/>
          <mkdir dir="${basedir}/installdeploy"/>         
          <mkdir dir="${basedir}/installdeploy/installedPackages"/>
          <echo file="${basedir}/installdeploy/package.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><types><members>@{namespace}</members><name>InstalledPackage</name></types><version>28.0</version></Package>]]></echo>
          <echo file="${basedir}/installdeploy/installedPackages/@{namespace}.installedPackage"><![CDATA[<InstalledPackage xmlns="http://soap.sforce.com/2006/04/metadata"><versionNumber>@{version}</versionNumber>${passwordElement}</InstalledPackage>]]></echo>
          <sf:deploy deployRoot="${basedir}/installdeploy" username="@{username}" password="@{password}" maxPoll="100" />
          <delete dir="${basedir}/installdeploy"/>
      </sequential>
  </macrodef>


  <macrodef name="uninstallPackage" description="Uninstalls the given managed package">
      <attribute name="namespace" description="Namespace of managed package to install."/>
      <attribute name="username" description="Salesforce user name."/>
      <attribute name="password" description="Salesforce password."/>
      <sequential>
          <!-- Generate working folder and metadata files representing the package to uninstall -->       
          <delete dir="${basedir}/installdeploy"/>
          <mkdir dir="${basedir}/installdeploy"/>
          <mkdir dir="${basedir}/installdeploy"/>         
          <mkdir dir="${basedir}/installdeploy/installedPackages"/>
          <echo file="${basedir}/installdeploy/package.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><version>28.0</version></Package>]]></echo>
          <echo file="${basedir}/installdeploy/destructiveChanges.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><types><members>@{namespace}</members><name>InstalledPackage</name></types><version>28.0</version></Package>]]></echo>
          <echo file="${basedir}/installdeploy/installedPackages/@{namespace}.installedPackage"><![CDATA[<InstalledPackage xmlns="http://soap.sforce.com/2006/04/metadata"><versionNumber>@{version}</versionNumber></InstalledPackage>]]></echo>
          <sf:deploy deployRoot="${basedir}/installdeploy" username="@{username}" password="@{password}" maxPoll="100" />
      </sequential>
  </macrodef>


  <macrodef name="getPackageVersion" description="Sets the InstalledPackage.NAMESPACE.versionNumber property to the version number of the package">
    <attribute name="namespace" description="Package's name to fetch version number for" />
    <attribute name="refresh" default="true" description="Should installedPackages be refreshed from the target org and deleted at the end of execution?" />
    <sequential>
      <!-- If we should refresh the installed packages, refresh them -->
      <if><istrue value="@{refresh}" />
        <then>
          <sf:bulkRetrieve
            username="${sf.username}"
            password="${sf.password}"
            metadataType="InstalledPackage"
            retrieveTarget="${basedir}/installedPackages"/>
        </then>
      </if>

      <if>
        <available file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" />
        <then>
          <!-- replace the string versionNumber with @{namespace}.versionNumber so the property is namespaced when loaded -->
          <replace file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" token="versionNumber" value="@{namespace}.versionNumber" />

          <!-- load the installedPackage file as properties -->
          <xmlproperty file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" />
        </then>
        <else>
          <!-- The package does not exist in the target org -->
          <property name="InstalledPackage.@{namespace}.versionNumber" value="Not Installed" />
        </else>
      </if>

      <!-- If refresh is true, delete the directory created to fetch the installedPackage metadata since it was created in the context of this macro execution-->
      <if>
        <istrue value="@{refresh}"/>
        <then>
          <delete dir="${basedir}/installedPackages"/>
        </then>
      </if>

    </sequential>
  </macrodef>

  <macrodef name="updatePackageVersion" description="Installs a specific version of a package.  If the package needs to be downgraded, first uninstalls the package.">
    <attribute name="namespace" description="Package's name to be installed" />
    <attribute name="version" description="The version to install (ex. 1.3).  Passing Not Installed will ensure the package is uninstalled" />
    <sequential>
      <if>
        <!-- NOTE: This assumes getPackageVersions was already run -->
        <not><equals arg1="${InstalledPackage.@{namespace}.versionNumber}" arg2="@{version}" /></not>
        <then>
          <!-- decide if uninstall is needed -->
          <if>
            <and>
              <!-- package is installed in org -->
              <not><equals arg1="${InstalledPackage.@{namespace}.versionNumber}" arg2="Not Installed" /></not>
              <not><equals arg1="${InstalledPackage.@{namespace}.versionNumber}" arg2="@{version}" /></not>
            
              <!-- package needs downgrade or should be Not Installed -->
              <or>
                <!-- if current package is a higher version than the requested version, we need to uninstall to downgrade -->
                <bool><isgreaterthan arg1="${InstalledPackage.@{namespace}.versionNumber}" arg2="@{version}" /></bool>
                <!-- if current package is a beta, any change requires uninstall -->
                <contains string="${InstalledPackage.@{namespace}.versionNumber}" substring="Beta" />
                <!-- if the package should be Not Installed, uninstall it -->
                <equals arg1="@{version}" arg2="Not Installed" />
              </or>
            </and>
            <then>
              <!-- Determine the right message -->
              <if>
                <contains string="${InstalledPackage.@{namespace}.versionNumber}" substring="Beta" />
                <then>
                  <echo>Uninstalling beta version @{namespace} ${InstalledPackage.@{namespace}.versionNumber} to install @{version}</echo>
                </then>
                <else>
                  <if>
                    <equals arg1="@{version}" arg2="Not Installed" />
                    <then>
                      <echo>Uninstalling @{namespace} ${InstalledPackage.@{namespace}.versionNumber}</echo>
                    </then>
                    <else>
                      <echo>Uninstalling @{namespace} ${InstalledPackage.@{namespace}.versionNumber} to downgrade to @{version}</echo>
                    </else>
                  </if>
                </else>
              </if>
              <uninstallPackage namespace="@{namespace}" username="${sf.username}" password="${sf.password}"/>
            </then>
            <else>
              <!-- just an upgrade, no need to uninstall first -->
              <echo>Upgrading @{namespace} from ${InstalledPackage.@{namespace}.versionNumber} to @{version}</echo>
            </else>
          </if>
          <if>
            <not><equals arg1="@{version}" arg2="Not Installed" /></not>
            <then>
              <installPackage namespace="@{namespace}" version="@{version}" username="${sf.username}" password="${sf.password}"/>
            </then>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="retrieveUnpackaged" description="Retrieves all unpackaged metadata from the target org into the specified dir">
    <attribute name="dir" description="The local directory to store the metadata files" />
    <sequential>

      <!-- Create a clean output directory structure -->
      <delete dir="@{dir}" />
      <mkdir dir="@{dir}"/>
      <mkdir dir="@{dir}/unpackaged"/>
      <mkdir dir="@{dir}/standard"/>

      <!-- Retrieve standard objects (uses lib/standard_objects.xml as the manifest) -->
      <sf:retrieve 
        username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        retrieveTarget="@{dir}/standard" 
        unpackaged="lib/standard_objects.xml"/>

      <!-- Retrieve unpackaged metadata (uses lib/all_metadata_types.xml as the manifest) -->
      <sf:retrieve 
        username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        retrieveTarget="@{dir}/unpackaged" 
        unpackaged="lib/all_meta_types.xml"/>

      <!-- Delete whitelisted files which are added to the org by Salesforce.  This includes both components which are always in an org and components which are automatically created by enabling Sites -->
      <loadfile property="metadata_whitelist" srcfile="lib/metadata_whitelist.txt" />
      <for param="filename" list="${metadata_whitelist}" delimiter="${line.separator}" >
      <!--list="Force_com.app,Exception.page,Unauthorized.page,FileNotFound.page,BandwidthExceeded.page,SiteTemplate.page,InMaintenance.page,AnswersHome.page,SiteLoginController.cls,SiteRegisterController.cls,ForgotPasswordController.cls,ForgotPassword.page,ForgotPasswordConfirm.page,SiteLogin.page,SiteRegister.page,SiteRegisterConfirm.page,StdExceptionTemplate.page,SiteFooter.component,SitePoweredBy.component,SiteLogin.component,SiteHeader.component,SiteSamples.resource">-->
        <sequential>
          <echo>Deleting whitelisted metadata file @{filename}</echo>
          <delete>
            <fileset dir="@{dir}" includes="**/*/@{filename}" />
          </delete>
        </sequential>
      </for>

    </sequential>
  </macrodef>

  <macrodef name="addTypeDestroyFromStdObj" description="">
    <attribute name="dir" description="The package directory containing the standard objects" />
    <attribute name="destxml" description="The path of the target destructiveChanges.xml" />
    <attribute name="typename" description="The type name as would appear in the manifest type's name element" />
    <attribute name="xslt" description="The path of the xslt transform to extract type components from the standard object file" />
    <sequential>
      <!-- First, build a OBJECT.object.typename file containing the <members/> elements for all components of the type to destroy -->
      <for param="file">
        <path>
          <fileset dir="@{dir}/objects" includes="**/*.object" />
        </path>
        <sequential>
          <!-- Parse the file basename and object name from the object's filename -->
          <basename property="obj_file" file="@{file}" />
          <basename property="object" file="@{file}" suffix=".object" />

          <!-- Run xslt to build a file for each object containing <members/> elements for components to destroy -->
          <xslt in="@{file}" out="@{dir}/objects/${obj_file}.@{typename}" style="@{xslt}" />
          <!-- Prepend member names with OBJECT. -->
          <replaceregexp file="@{dir}/objects/${obj_file}.@{typename}" match="members>(.*)./members>" replace="members>${object}.\1&lt;/members>${line.separator}" flags="g" />

          <!-- Unset properites for basename call in next iteration of loop -->
          <var name="object" unset="true" />
          <var name="obj_file" unset="true" />
        </sequential>
      </for>

      <!-- First, concatenate all <members/> from earlier extraction output files -->
      <concat destfile="@{dir}/objects/@{typename}.destroy">
          <fileset dir="@{dir}/objects" includes="**/*.object.@{typename}" />
          <filterchain>
              <linecontains>
                  <contains value="members>" />
              </linecontains>
          </filterchain>
      </concat>
      <!-- Construct a full manifest <types/> section from the concatenated file -->
      <loadfile property="type.destroy" srcfile="@{dir}/objects/@{typename}.destroy" />
      <var name="type.destroy" value="${line.separator}${lt}types>${line.separator}${type.destroy}${lt}name>@{typename}${lt}/name>${line.separator}${lt}/types>${line.separator}" />
      <delete>
          <fileset dir="@{dir}/objects" includes="**/*.@{typename}" />
      </delete>
      <!-- If there are any members to destroy, add the <types/> section to destructiveChanges.xml -->
      <if>
        <isset property="type.destroy" /> 
        <then>
          <replaceregexp file="@{destxml}" match="Package(.*)>" replace="Package\1>${type.destroy}" />
          <var name="type.destroy" unset="true" />
        </then>
      </if>
    </sequential>  
  </macrodef>

  <macrodef name="buildDestructiveChanges" description="Construct two packages.  The first package resets standard object ActionOverrides to type Default.  The second uses a custom built destructiveChanges.xml file to delete all unpackaged metadata">
    <attribute name="srcdir" description="Source directory containing the retrieved standard object and unpackaged metadata for the org.  This directory should be created by retrieveUnpackaged" />
    <attribute name="dir" description="Target directory to create the standard and unpackaged packages for undeployment" />
    <sequential>

      <!-- Create a clean directory structure to work with -->
      <delete dir="@{dir}" />
      <mkdir dir="@{dir}" />
      <mkdir dir="@{dir}/standard" />
      <mkdir dir="@{dir}/unpackaged" />
      <property name="destxml" value="@{dir}/unpackaged/destructiveChanges.xml" />

      <!-- Create the package.xml to accompany the destructiveChanges.xml -->
      <echo file="@{dir}/unpackaged/package.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
<version>25.0</version>
</Package>]]></echo>

      <!-- Write the header for the destructiveChanges.xml -->
      <echo file="${destxml}">&lt;?xml version="1.0" encoding="UTF-8"?&gt;${line.separator}</echo>
      <echo file="${destxml}" append="true">&lt;Package xmlns="http://soap.sforce.com/2006/04/metadata"&gt;${line.separator}</echo>

      <!-- Loop through the subfolders of the retrieved unpackaged metadata to add lines to destructiveChanges.xml -->
      <for param="typedir">
        <path>
          <dirset dir="@{srcdir}/unpackaged" includes="**/*" />
        </path>
        <sequential>
          <basename property="metatype" file="@{typedir}" />

          <!-- Map dir name to a metadata type name.  This also serves as a whitelist for which metadata types to try to delete.  If a mapping is not listed, the type is not added to destructiveChanges.xml -->
          <!-- FIXME: Is there a cleaner way to do this so the mapping could live in a separate file? -->
          <var name="typename" unset="true" /> 
          <switch value="${metatype}">
            <case value="applications">
              <property name="typename" value="CustomApplication" />
            </case>
            <case value="classes">
              <property name="typename" value="ApexClass" />
            </case>
            <case value="components">
              <property name="typename" value="ApexComponent" />
            </case>
            <case value="objects">
              <property name="typename" value="CustomObject" />
            </case>
            <case value="pages">
              <property name="typename" value="ApexPage" />
            </case>
            <case value="staticresources">
              <property name="typename" value="StaticResource" />
            </case>
            <case value="tabs">
              <property name="typename" value="CustomTab" />
            </case>
            <case value="triggers">
              <property name="typename" value="ApexTrigger" />
            </case>
            <default/>
          </switch>

          <if>
            <isset property="typename" />
            <then>

              <!-- Write a new <types/> section for the metadata type -->
              <echo file="${destxml}" append="true">  &lt;types&gt;${line.separator}</echo>

              <!-- Loop through files in the type's dir and add <members /> element for each file -->
              <for param="file">
                <path>
                  <fileset dir="@{typedir}" includes="**/*" excludes="*.xml" />
                </path>
                <sequential>
                  <!-- get basename and basename without suffix for file. propertyregex is used since we don't know the file suffix from only the dir name (i.e. classes vs .class) -->
                  <basename property="component_file" file="@{file}" />
                  <propertyregex property="component" input="${component_file}" regexp="(.*)\.(.*)" select="\1" />

                  <!-- Write the <members/> element -->
                  <echo file="${destxml}" append="true">    &lt;members&gt;${component}&lt;/members&gt;${line.separator}</echo>

                  <!-- Unset basename properties for next execution since we're using basename and propertyregex which will not overwrite a property -->
                  <var name="component" unset="true" />
                  <var name="component_file" unset="true" />
                </sequential>
              </for>
              <!-- Write the <name/> element and close the <types/> element -->
              <echo file="${destxml}" append="true">    &lt;name&gt;${typename}&lt;/name&gt;${line.separator}</echo>
              <echo file="${destxml}" append="true">  &lt;/types&gt;${line.separator}</echo>

            </then>
          </if>

          <!-- Unset the metatype so basename cna set it on next iteration through loop -->
          <var name="metatype" unset="true" />
        </sequential>
      </for>

      <!-- Write the <version/> tag and close <Package/> -->
      <echo file="${destxml}" append="true">  &lt;version&gt;29.0&lt;/version&gt;${line.separator}</echo>
      <echo file="${destxml}" append="true">&lt;/Package&gt;</echo>
     
      <!-- Copy the package manifest used to retrieve standard objects into srcdir and create an objects subfolder-->
      <copy file="@{srcdir}/standard/package.xml" todir="@{dir}/standard" />
      <mkdir dir="@{dir}/standard/objects" />

      <!-- Built a reset version of each retrieved standard object and add sub metadata types of object to destructiveChanges.xml -->
      <for param="file">
        <path>
          <fileset dir="@{srcdir}/standard/objects" includes="**/*.object" />
        </path>
        <sequential>
          <!-- Parse the file basename and object name from the object's filename -->
          <basename property="obj_file" file="@{file}" />
          <basename property="object" file="@{file}" suffix=".object" />

          <!-- Rewrite all ActionOverrides to type Default.  This is a special case since we can't delete ActionOverrides via destructiveChanges.xml -->
          <xslt in="@{file}" out="@{dir}/standard/objects/${obj_file}" style="lib/remove_action_overrides.xsl" />

          <!-- Unset properites for basename call in next iteration of loop -->
          <var name="object" unset="true" />
          <var name="obj_file" unset="true" />
        </sequential>
      </for>

      <!-- Add sub metadata types which can be deleted to destructiveChanges.xml.  Currently this only handles custom fields and fieldsets. -->

      <!-- Add standard object fields to destructiveChanges.xml -->
      <addTypeDestroyFromStdObj dir="@{dir}/standard" destxml="${destxml}" typename="CustomField" xslt="lib/extract_stdobj_custom_fields.xsl" />

      <!-- Add standard object fieldsets to destructiveChanges.xml -->
      <addTypeDestroyFromStdObj dir="@{dir}/standard" destxml="${destxml}" typename="FieldSet" xslt="lib/extract_stdobj_fieldsets.xsl" />

    </sequential>

  </macrodef>

</project>
